import * as faceapi from "face-api.js"
import './style.css'

const GROUND_TRUTH = [
    new faceapi.LabeledFaceDescriptors(
        'F',
        [
            new Float32Array([-0.1793300211429596, 0.08565361797809601, 0.016897428780794144, 0.04353418946266174, -0.17107586562633514, -0.047660376876592636, 0.03277411311864853, -0.059660669416189194, 0.12901830673217773, -0.06870682537555695, 0.16546183824539185, -0.05192521959543228, -0.19282282888889313, -0.0045562260784208775, -0.03963024169206619, 0.0855756476521492, -0.0952833816409111, -0.1923423707485199, -0.12537060678005219, -0.13864019513130188, -0.009306727908551693, 0.03307802975177765, 0.003189962822943926, 0.10681445151567459, -0.12743841111660004, -0.3252268135547638, -0.08206711709499359, -0.08683197945356369, 0.18684032559394836, -0.08558381348848343, 0.05683969333767891, 0.025875438004732132, -0.11045091599225998, -0.03893706575036049, 0.0400463230907917, 0.07002092897891998, -0.034162648022174835, -0.023432353511452675, 0.3108651041984558, -0.04351218789815903, -0.2082768976688385, 0.045717135071754456, 0.03276602923870087, 0.396776407957077, 0.1354788839817047, 0.04662415385246277, 0.03685382008552551, -0.02007114328444004, 0.12857283651828766, -0.1655709445476532, 0.09033709764480591, 0.16959601640701294, 0.12860624492168427, 0.019000830128788948, 0.08810754120349884, -0.12350756675004959, -0.025936564430594444, 0.18029645085334778, -0.21043364703655243, 0.1030597910284996, 0.028869524598121643, -0.07022184878587723, -0.01122588012367487, -0.07759193331003189, 0.17076726257801056, 0.08119824528694153, -0.057973671704530716, -0.19214916229248047, 0.1388818323612213, -0.2617410123348236, -0.013179884292185307, 0.18264462053775787, -0.08696386963129044, -0.1325792521238327, -0.23189491033554077, 0.05931350216269493, 0.5017964243888855, 0.17778748273849487, -0.12743403017520905, 0.025784049183130264, 0.054169777780771255, -0.03604859113693237, 0.14885155856609344, 0.07466918975114822, -0.15256153047084808, -0.034825462847948074, -0.13528671860694885, 0.032785557210445404, 0.17767289280891418, 0.04384498670697212, -0.120821513235569, 0.11466220021247864, 0.08081358671188354, -0.007220889441668987, 0.06026361137628555, 0.013983707875013351, -0.13311421871185303, -0.037005599588155746, -0.0827534943819046, -0.0483354851603508, 0.04560791328549385, -0.004106280393898487, 0.05502701178193092, 0.02280663326382637, -0.07559119164943695, 0.17888778448104858, -0.026451269164681435, 0.021711599081754684, -0.08857181668281555, 0.09748797118663788, -0.10004083812236786, -0.004026402719318867, 0.1661611944437027, -0.24692632257938385, 0.162326380610466, 0.11285192519426346, -0.035798024386167526, 0.1457832008600235, 0.07274038344621658, 0.022872522473335266, -0.009350071661174297, 0.0307052880525589, -0.07210809737443924, -0.07925776392221451, 0.06108355149626732, -0.07599976658821106, 0.20066992938518524, 0.009220273233950138]),
            new Float32Array([-0.15257443487644196, 0.06000259518623352, 0.03430155664682388, -0.0029486091807484627, -0.1350632756948471, -0.10875969380140305, 0.03903995454311371, -0.03847362846136093, 0.13581645488739014, -0.08809873461723328, 0.13171806931495667, -0.07956422865390778, -0.24670875072479248, -0.026348689571022987, -0.000007677823305130005, 0.11146354675292969, -0.13929423689842224, -0.12095867097377777, -0.1075667217373848, -0.13666728138923645, 0.004396545235067606, 0.009748993441462517, 0.004208967089653015, 0.118876613676548, -0.10582616925239563, -0.311658650636673, -0.07349180430173874, -0.12043234705924988, 0.11850270628929138, -0.04835420101881027, 0.061839185655117035, 0.07540776580572128, -0.0919366180896759, -0.0520673468708992, 0.04624518007040024, 0.03034381754696369, -0.01738426648080349, 0.02653825283050537, 0.29409438371658325, -0.03769481182098389, -0.17172741889953613, -0.019199155271053314, 0.012871094048023224, 0.3710225820541382, 0.09371813386678696, 0.08831395953893661, 0.06903193891048431, -0.030585074797272682, 0.1544613242149353, -0.20844437181949615, 0.06928049027919769, 0.17540720105171204, 0.1159484013915062, 0.004468664526939392, 0.13977880775928497, -0.12103888392448425, 0.027539735659956932, 0.1476019322872162, -0.2868039608001709, 0.13611114025115967, 0.07944203913211823, -0.0508447140455246, -0.05166628956794739, -0.0992993488907814, 0.1842883676290512, 0.061765898019075394, -0.08723276853561401, -0.16643588244915009, 0.1695176362991333, -0.2695906460285187, -0.023075232282280922, 0.16513194143772125, -0.09111565351486206, -0.1650557518005371, -0.269217848777771, 0.010719135403633118, 0.4347245693206787, 0.2531181275844574, -0.11213937401771545, 0.006237995810806751, 0.01850905269384384, -0.04816818982362747, 0.15597590804100037, 0.05549465864896774, -0.14445602893829346, -0.0009056776762008667, -0.06990409642457962, 0.04312891140580177, 0.11905456334352493, 0.02792053110897541, -0.09522391110658646, 0.14709845185279846, 0.0918346494436264, -0.02378600463271141, -0.014740006998181343, -0.0538049153983593, -0.1082325130701065, -0.05052277445793152, -0.1057349145412445, -0.014086834155023098, 0.042952656745910645, -0.03375326842069626, 0.07292100042104721, 0.016631897538900375, -0.1304427981376648, 0.1748838871717453, -0.048625919967889786, -0.01790156587958336, -0.13764743506908417, 0.10490597784519196, -0.16025470197200775, 0.018012458458542824, 0.1702118068933487, -0.25790977478027344, 0.1511150300502777, 0.163492351770401, -0.007355806417763233, 0.10732530057430267, 0.012433958239853382, 0.008966390043497086, -0.011128978803753853, -0.02136397920548916, -0.07939355075359344, -0.11104319244623184, 0.08964672684669495, -0.07523968815803528, 0.1807466596364975, -0.00620849896222353]),
        ]
    ),
    new faceapi.LabeledFaceDescriptors(
        'S',
        [
            new Float32Array([-0.1359163373708725, 0.016520574688911438, 0.0918012410402298, -0.06976153701543808, -0.14734221994876862, 0.018226753920316696, 0.0494253970682621, -0.017509646713733673, 0.11306923627853394, -0.12685856223106384, 0.19190716743469238, -0.002917057368904352, -0.24704690277576447, 0.017993547022342682, -0.049596916884183884, 0.1585332453250885, -0.1583496779203415, -0.15876641869544983, -0.10978573560714722, -0.098827064037323, 0.012562009505927563, 0.054016053676605225, -0.029613643884658813, 0.09580892324447632, -0.1541726142168045, -0.251838356256485, -0.10876281559467316, -0.011096834205091, -0.04577619582414627, -0.04750620573759079, 0.03738558292388916, 0.06511420756578445, -0.09829308837652206, 0.026720821857452393, 0.05873297527432442, 0.08005636930465698, -0.04080342873930931, -0.07101918011903763, 0.19448548555374146, -0.006242736242711544, -0.23498816788196564, -0.018641013652086258, 0.16482874751091003, 0.3042115569114685, 0.20118144154548645, 0.0708770751953125, -0.006659278646111488, 0.005768325179815292, 0.16507072746753693, -0.35033538937568665, 0.026908546686172485, 0.1448596566915512, 0.08297105878591537, 0.06263141334056854, 0.10095669329166412, -0.1398974508047104, -0.020331971347332, 0.1964837610721588, -0.11973413825035095, 0.09358593076467514, -0.0235733725130558, -0.18059802055358887, 0.05679384991526604, -0.16032809019088745, 0.25554221868515015, 0.06035055220127106, -0.20534640550613403, -0.1449281871318817, 0.22805091738700867, -0.22331352531909943, -0.10171815752983093, 0.16024714708328247, -0.09024148434400558, -0.170063316822052, -0.29843536019325256, 0.02949555218219757, 0.4444381892681122, 0.1785125881433487, -0.07318572700023651, 0.03964059054851532, -0.047658439725637436, -0.027662508189678192, -0.04030371084809303, 0.19302617013454437, -0.04843132197856903, 0.01112456526607275, -0.10473498702049255, -0.03882213681936264, 0.2946229577064514, 0.016152871772646904, -0.014903819188475609, 0.30220770835876465, 0.034320488572120667, 0.012122409418225288, 0.013536911457777023, 0.05498052015900612, -0.096601203083992, -0.06823094189167023, -0.09793213754892349, 0.0317145511507988, -0.07365083694458008, -0.12244517356157303, 0.015425516292452812, 0.09464512765407562, -0.16614902019500732, 0.17782986164093018, -0.10450132191181183, 0.03275790065526962, -0.09498069435358047, 0.007045523263514042, -0.07625728845596313, 0.02288825623691082, 0.15425346791744232, -0.3327190577983856, 0.08659214526414871, 0.16370128095149994, 0.054970938712358475, 0.13188257813453674, 0.06503897160291672, 0.07107458263635635, -0.009437423199415207, -0.06689681857824326, -0.14091216027736664, -0.09261825680732727, 0.03998735919594765, -0.16761742532253265, 0.08294444531202316, 0.07896844297647476]),
            new Float32Array([-0.12743307650089264, 0.0063416315242648125, 0.09513787180185318, -0.07378866523504257, -0.14398613572120667, 0.016289323568344116, 0.052150167524814606, -0.01784742996096611, 0.12064943462610245, -0.1192598044872284, 0.1878967136144638, 0.0022024125792086124, -0.23938661813735962, 0.013643419370055199, -0.049168214201927185, 0.16306227445602417, -0.16203425824642181, -0.15594732761383057, -0.11150459200143814, -0.1021396666765213, 0.00803140178322792, 0.05172129347920418, -0.034013617783784866, 0.1008818969130516, -0.15480570495128632, -0.25884154438972473, -0.11151711642742157, -0.010765459388494492, -0.039470866322517395, -0.04542836546897888, 0.02592584118247032, 0.06947002559900284, -0.10474451631307602, 0.01962452381849289, 0.06267043203115463, 0.08055347949266434, -0.04567209631204605, -0.07893112301826477, 0.18866989016532898, -0.0015687430277466774, -0.23084121942520142, -0.020949704572558403, 0.15882077813148499, 0.30721408128738403, 0.211272194981575, 0.07740671932697296, -0.0011460091918706894, 0.011691058054566383, 0.17234352231025696, -0.3478228449821472, 0.031170856207609177, 0.14337344467639923, 0.07797513157129288, 0.06514178961515427, 0.09798765927553177, -0.13938584923744202, -0.024524876847863197, 0.19745329022407532, -0.13146468997001648, 0.09380082786083221, -0.024218957871198654, -0.18571588397026062, 0.06135699525475502, -0.16243255138397217, 0.2546694576740265, 0.06255016475915909, -0.20638273656368256, -0.13724270462989807, 0.2365269809961319, -0.2269642949104309, -0.08742327243089676, 0.14356645941734314, -0.09409846365451813, -0.17218385636806488, -0.3037048578262329, 0.03261686488986015, 0.44871723651885986, 0.18545782566070557, -0.07195671647787094, 0.031081372871994972, -0.04912600293755531, -0.02413002960383892, -0.03513472527265549, 0.19024357199668884, -0.04729842394590378, 0.015600071288645267, -0.10238336026668549, -0.0358784943819046, 0.2956894338130951, 0.02034158632159233, -0.013642330653965473, 0.30481213331222534, 0.029051152989268303, 0.0014844099059700966, 0.0129166878759861, 0.05832652002573013, -0.10011911392211914, -0.06603705137968063, -0.10010513663291931, 0.03569142520427704, -0.07820877432823181, -0.12010127305984497, 0.02537001296877861, 0.0990493893623352, -0.16051708161830902, 0.1794288456439972, -0.10217448323965073, 0.033936284482479095, -0.10015659034252167, 0.0026870062574744225, -0.08495800942182541, 0.011489443480968475, 0.15389418601989746, -0.32647904753685, 0.08398811519145966, 0.16501565277576447, 0.05904847010970116, 0.13726554811000824, 0.052887484431266785, 0.07396848499774933, -0.013418388552963734, -0.0752696841955185, -0.13435101509094238, -0.08891835808753967, 0.041554003953933716, -0.16031071543693542, 0.09066756814718246, 0.08134904503822327]),
        ]
    ),
    new faceapi.LabeledFaceDescriptors(
        'A',
        [
            new Float32Array([-0.09908320009708405, 0.07272256910800934, 0.039592765271663666, -0.06935856491327286, -0.14748552441596985, -0.03557930141687393, -0.008919567801058292, 0.020275479182600975, 0.15247048437595367, -0.016272999346256256, 0.1773674041032791, 0.04161202907562256, -0.2503996789455414, -0.04406176507472992, -0.06799063086509705, 0.1280154436826706, -0.1734951287508011, -0.15162040293216705, -0.06098869442939758, -0.09968192875385284, 0.07956206798553467, -0.025614622980356216, -0.02813471294939518, 0.07545321434736252, -0.13673317432403564, -0.2748188078403473, -0.07115163654088974, -0.11937255412340164, 0.09027445316314697, -0.1282457560300827, 0.027125025168061256, 0.0048300717025995255, -0.13241764903068542, -0.06286396086215973, 0.02461470291018486, 0.04638240858912468, -0.028675951063632965, -0.07261902838945389, 0.21791136264801025, 0.03307492285966873, -0.13553640246391296, 0.08069605380296707, 0.06400321424007416, 0.3017730712890625, 0.13449445366859436, 0.08716238290071487, 0.03341277688741684, 0.049396760761737823, 0.17056410014629364, -0.3117977976799011, 0.1122165247797966, 0.1393517404794693, 0.18279783427715302, 0.043823160231113434, 0.1452266275882721, -0.19904576241970062, -0.03844447061419487, 0.26061907410621643, -0.27804046869277954, 0.23435388505458832, -0.027249742299318314, -0.06093231588602066, -0.08408211916685104, -0.15310348570346832, 0.1741022765636444, 0.17274783551692963, -0.1812787801027298, -0.11156927049160004, 0.1941702663898468, -0.1315317451953888, -0.027522049844264984, 0.11514940112829208, -0.10857951641082764, -0.13780100643634796, -0.200227752327919, 0.08993102610111237, 0.3851899802684784, 0.17015494406223297, -0.1507294625043869, -0.08280400186777115, 0.0008926753653213382, 0.008344413712620735, -0.04055311903357506, 0.015834292396903038, -0.11095408350229263, -0.09339559078216553, -0.0844619944691658, -0.021014420315623283, 0.09856771677732468, 0.0694086030125618, -0.03750043362379074, 0.23100993037223816, -0.010371004231274128, 0.03229902684688568, -0.06591019779443741, 0.05321356654167175, -0.15469415485858917, -0.053956080228090286, -0.05608535557985306, -0.03601702302694321, 0.026700880378484726, -0.16228872537612915, -0.001868032617494464, 0.06518365442752838, -0.11230513453483582, 0.05216354504227638, -0.06664348393678665, 0.03839503973722458, -0.07035447657108307, 0.10084085911512375, -0.1198439672589302, 0.020512863993644714, 0.15304139256477356, -0.2795974016189575, 0.2750341594219208, 0.21905368566513062, -0.01158501859754324, 0.06143496185541153, 0.03645126521587372, -0.01154645811766386, 0.031890641897916794, -0.07740144431591034, -0.1207365170121193, -0.12095527350902557, 0.010712447576224804, -0.12470006197690964, 0.03440540283918381, 0.02170592173933983]),
        ]
    ),
    new faceapi.LabeledFaceDescriptors(
        'P',
        [
            new Float32Array([-0.18621034920215607, 0.058044180274009705, -0.06999475508928299, -0.0714893713593483, -0.1185579001903534, -0.015019958838820457, -0.07382925599813461, -0.12151752412319183, 0.11764369904994965, -0.08551307767629623, 0.19254523515701294, 0.010769644752144814, -0.27151772379875183, -0.06982677429914474, 0.0069006383419036865, 0.07032335549592972, -0.2212621569633484, -0.09922504425048828, -0.04349163919687271, -0.028957528993487358, 0.06864404678344727, -0.017119785770773888, 0.030877158045768738, 0.08727171272039413, -0.11828384548425674, -0.2728060781955719, -0.12107086926698685, -0.09204909205436707, 0.06979148834943771, -0.06796115636825562, 0.019200216978788376, 0.04433320835232735, -0.10197212547063828, -0.005304349586367607, 0.026757188141345978, 0.16148346662521362, -0.1264183223247528, -0.022159643471240997, 0.2972840964794159, 0.009590260684490204, -0.13921326398849487, -0.07513994723558426, 0.008904839865863323, 0.2875579297542572, 0.22595134377479553, -0.008402321487665176, 0.03827397897839546, -0.06941159069538116, 0.12837018072605133, -0.2983894348144531, 0.06947661191225052, 0.26331210136413574, 0.13412709534168243, 0.13634136319160461, 0.015377525240182877, -0.18788014352321625, 0.0953240692615509, 0.16920869052410126, -0.2085714191198349, 0.07536371797323227, 0.09137577563524246, -0.11747461557388306, 0.020322322845458984, 0.030812645331025124, 0.21302562952041626, 0.12486369162797928, -0.14830784499645233, -0.15758627653121948, 0.12041463702917099, -0.20645804703235626, -0.06608268618583679, 0.123331718146801, -0.1635391116142273, -0.25696396827697754, -0.287717342376709, -0.012508023530244827, 0.39358869194984436, 0.21029888093471527, -0.08077037334442139, 0.017463017255067825, -0.11170583218336105, -0.09073173254728317, 0.09328897297382355, 0.057983167469501495, -0.13369406759738922, -0.03956228494644165, -0.10966743528842926, 0.058717552572488785, 0.17742545902729034, -0.004425864666700363, -0.020679200068116188, 0.2556030750274658, 0.09990537166595459, 0.09806394577026367, 0.07519429922103882, 0.04366540163755417, -0.006241468712687492, -0.05320289731025696, -0.07938399910926819, 0.029546301811933517, -0.047134023159742355, -0.18454518914222717, 0.08412642031908035, 0.0616791695356369, -0.16169090569019318, 0.2062453180551529, 0.026946499943733215, 0.05160364508628845, -0.076533742249012, -0.0664881095290184, -0.16286073625087738, 0.0094304159283638, 0.213333860039711, -0.2903100550174713, 0.1886100023984909, 0.20598754286766052, 0.09854038059711456, 0.16282479465007782, 0.1220291331410408, 0.06714576482772827, -0.04502083733677864, -0.08377537131309509, -0.1343006193637848, 0.03608391061425209, -0.00942342821508646, 0.005180276930332184, 0.05945461243391037, 0.04731316119432449]),
            new Float32Array([-0.12055560946464539, 0.060912758111953735, -0.01192772388458252, -0.02182605117559433, -0.11382785439491272, 0.021873561665415764, -0.08010489493608475, -0.027355432510375977, 0.1623777598142624, -0.12170402705669403, 0.2357732504606247, 0.008615070022642612, -0.23192261159420013, -0.058549851179122925, -0.047392040491104126, 0.1228799968957901, -0.20832546055316925, -0.07867071777582169, -0.08464306592941284, -0.07610587030649185, 0.03301181644201279, -0.0082221869379282, 0.013078252784907818, 0.09412942081689835, -0.12070166319608688, -0.3538913130760193, -0.10862834751605988, -0.11643832921981812, 0.08293665200471878, -0.08773074299097061, -0.026164039969444275, 0.005746594630181789, -0.12753254175186157, -0.022900374606251717, 0.01625484600663185, 0.08911334723234177, -0.12442784011363983, -0.0339767187833786, 0.2731999158859253, 0.020358391106128693, -0.14112946391105652, 0.027989715337753296, -0.013811323791742325, 0.27188876271247864, 0.1840183287858963, 0.055648911744356155, -0.006943751126527786, -0.08281593024730682, 0.10376553237438202, -0.28720879554748535, 0.09043416380882263, 0.2528018057346344, 0.11842801421880722, 0.1324978470802307, 0.016267355531454086, -0.178192600607872, 0.038841407746076584, 0.19196805357933044, -0.26271024346351624, 0.07558755576610565, -0.0020727133378386497, -0.12343952804803848, -0.006393710151314735, 0.0024120095185935497, 0.20033548772335052, 0.2045457661151886, -0.1568671464920044, -0.1640494167804718, 0.13615001738071442, -0.22243459522724152, 0.014777636155486107, 0.09432721138000488, -0.10812214761972427, -0.2723805010318756, -0.2845672369003296, 0.09391845762729645, 0.3943764567375183, 0.24550841748714447, -0.1488424688577652, -0.05689627677202225, -0.057638831436634064, -0.07528577744960785, 0.10179918259382248, 0.08907897770404816, -0.15307942032814026, -0.10908924043178558, -0.07858054339885712, 0.0386827290058136, 0.10106263309717178, 0.015022458508610725, -0.04734770953655243, 0.23660095036029816, 0.05183425918221474, 0.07163020223379135, 0.050462495535612106, 0.06397996097803116, -0.12455517053604126, -0.04917863756418228, -0.11454274505376816, 0.017642904072999954, -0.025346510112285614, -0.10236559808254242, 0.03547289967536926, 0.04968567192554474, -0.09582629054784775, 0.16023075580596924, -0.023984184488654137, -0.06878135353326797, -0.06115572527050972, -0.013271402567625046, -0.16544443368911743, -0.03940156102180481, 0.20416072010993958, -0.2550419867038727, 0.23903046548366547, 0.19560502469539642, 0.09699087589979172, 0.22694596648216248, 0.15794378519058228, 0.07109372317790985, -0.04329080134630203, -0.10000991076231003, -0.13485994935035706, 0.0011816101614385843, 0.03298467397689819, -0.02908206731081009, 0.08957935124635696, -0.026939816772937775]),
        ]),
]

const CODE = new Map()
CODE.set("S", "2")
CODE.set("A", "8")
CODE.set("P", "3")
CODE.set("F", "6")

const NAMES_LEFT_TO_RIGHT = Array.from(CODE.keys())


const colors = {
    not_all: "217,70,86",
    incorrect_position: "241,177,19",
    correct_position: "98,217,0",
}

class DrawableDetection {
    // Persistent and smooth detections
    baseSize = 6
    baseWidth = 250

    detectionRadiusThreshold = 40
    smoothingFactor = 0.1

    constructor(name) {
        this.name = name
        this.x = 0
        this.y = 0
        this.sizeRem = 0.0
        this.opacity = 0.0

        this.targetX = 0
        this.targetY = 0
        this.targetSizeRem = 0.0
        this.targetOpacity = 0.0
    }

    update_detection_with_recognition(recognitionResults, names) {
        let recognitionForName = null
        for (let i = 0; i < recognitionResults.length; i++) {
            if (names[i] == this.name) {
                recognitionForName = recognitionResults[i]
                break
            }
        }
        if (recognitionForName === null) {
            this.targetOpacity = 0.0
        } else {
            this.targetOpacity = 1.0
            let coordinates = this._bboxToTargetValues(recognitionForName.detection.box)
            this.targetX = coordinates.x
            this.targetY = coordinates.y
            this.targetSizeRem = coordinates.sizeRem
        }
    }

    update_detection_without_recognition(detectionResults) {
        let minDistance = 1000000.0
        let probableNewCoordinates = null
        for (let detection of detectionResults) {
            const coordinates = this._bboxToTargetValues(detection.box)
            const distance = Math.sqrt(Math.pow(this.targetX - coordinates.x, 2) + Math.pow(this.targetY - coordinates.y, 2))
            if ((distance < minDistance) && (distance <= this.detectionRadiusThreshold)) {
                probableNewCoordinates = coordinates
                minDistance = distance
            }
        }
        if (probableNewCoordinates !== null) {
            this.targetX = probableNewCoordinates.x
            this.targetY = probableNewCoordinates.y
            this.targetSizeRem = probableNewCoordinates.sizeRem
        }
    }

    tick() {
        this.x = this._smoothValue(this.x, this.targetX)
        this.y = this._smoothValue(this.y, this.targetY)
        this.sizeRem = this._smoothValue(this.sizeRem, this.targetSizeRem)
        this.opacity = this._smoothValue(this.opacity, this.targetOpacity)
    }

    isDetected() {
        return this.opacity >= 0.05
    }

    _smoothValue(currentValue, targetValue) {
        return currentValue + (targetValue - currentValue) * this.smoothingFactor
    }

    _bboxToTargetValues(bbox) {
        return {
            x: bbox.x + bbox.width / 2,
            y: bbox.y - 50,
            sizeRem: this.baseSize * Math.pow(bbox.width / this.baseWidth, 2),
        }
    }
}

const drawables = GROUND_TRUTH.map(g => new DrawableDetection(g.label))

async function setupCamera(videoElement) {

    const changeCameraButton = document.getElementById('changeCamera')

    const constraints = {
        video: {}
    }

    async function getCameras() {
        const devices = await navigator.mediaDevices.enumerateDevices()
        const videoDevices = devices.filter(device => device.kind === 'videoinput')
        return videoDevices
    }

    async function bindVideo() {
        let currentCameraId = 0
        const availableCameras = await getCameras()
        changeCameraButton.onclick = () => {
            currentCameraId = (currentCameraId + 1) % availableCameras.length
            let updatedConstraints = {...constraints}
            updatedConstraints.video.deviceId = {exact: availableCameras[currentCameraId].deviceId}

            startStream(updatedConstraints)
        }
    }


    async function startStream(constraints) {
        const stream = await navigator.mediaDevices.getUserMedia(constraints)
        videoElement.srcObject = stream
    }

    await bindVideo()
    await startStream(constraints)
    console.log("Video started")

}

async function loadModels() {
    const baseUrl = `${window.location.href}/models`
    await faceapi.loadTinyFaceDetectorModel(baseUrl)
    await faceapi.loadFaceLandmarkTinyModel(baseUrl)
    await faceapi.loadFaceRecognitionModel(baseUrl)
}

function setupCanvas(inputElement, outputElement) {
    inputElement.width = inputElement.videoWidth
    inputElement.height = inputElement.videoHeight
    outputElement.width = inputElement.width
    outputElement.height = inputElement.height
}

async function setupFaceRecognition(inputElement, outputElement) {
    setupCanvas(inputElement, outputElement)

    let detectionCounter = 0
    const recognizeFacesEveryNInterations = 10
    const faceMatcher = new faceapi.FaceMatcher(GROUND_TRUTH, 0.6)

    async function detect(detection_options) {
        if (detectionCounter === 0) {
            let recognitions = await faceapi.detectAllFaces(inputElement, detection_options).withFaceLandmarks(true).withFaceDescriptors()
            const predictedNames = recognitions.map(r => faceMatcher.findBestMatch(r.descriptor).label)

            for (let drawable of drawables) {
                drawable.update_detection_with_recognition(recognitions, predictedNames)
            }
        } else {
            const detections = await faceapi.detectAllFaces(inputElement, detection_options)
            for (let drawable of drawables) {
                drawable.update_detection_without_recognition(detections)
            }
        }
        detectionCounter = (detectionCounter + 1) % recognizeFacesEveryNInterations
        for (let drawable of drawables) {
            drawable.tick()
        }

        drawDetections()

        setTimeout(() => detect(detection_options))
    }

    function drawDetections() {
        const ctx = outputElement.getContext('2d')
        ctx.clearRect(0, 0, outputElement.width, outputElement.height)

        const areAllNamesDetected = drawables.reduce((previous, currentDrawable) => previous && currentDrawable.isDetected(), true)
        const drawablesLeftToRight = drawables.sort((a, b) => a.x - b.x)

        for (let i = 0; i < drawablesLeftToRight.length; i++) {
            const drawable = drawablesLeftToRight[i]
            if (!drawable.isDetected())
                continue

            let color = colors.not_all
            if (areAllNamesDetected)
                color = drawable.name === NAMES_LEFT_TO_RIGHT[i] ? colors.correct_position : colors.incorrect_position

            ctx.font = `bold ${drawable.sizeRem}rem sans-serif`
            ctx.textAlign = "center"
            ctx.fillStyle = `rgba(${color}, ${drawable.opacity})`
            const text = CODE.get(drawable.name)
            ctx.fillText(text, drawable.x, drawable.y)
            ctx.strokeStyle = `rgba(0, 0, 0, ${drawable.opacity})`
            ctx.lineWidth = 3 * drawable.sizeRem / drawable.baseSize
            ctx.strokeText(text, drawable.x, drawable.y)
        }
    }

    const options = new faceapi.TinyFaceDetectorOptions({inputSize: 320, scoreThreshold: 0.5})
    detect(options)
    console.log("Detection started")
}

async function requestCameraPermission() {
    try {
        await navigator.mediaDevices.getUserMedia({video: true})
        return true;
    } catch (DomException) {
        document.getElementById("noCameraPermission").style.display = "block";
        return false;
    }
}

async function start(inputElement, outputElement) {
    if (!(await requestCameraPermission()))
        return;
    await setupCamera(inputElement)
    document.documentElement.requestFullscreen()
    document.getElementById("startContainer").style.display = "none"
    document.getElementById("main").style.visibility = "visible"
    setupFaceRecognition(inputElement, outputElement)  // On Android, the initial autoplay does not trigger a play event
}

async function main() {
    let inputElement = document.getElementById("myVideo")
    const outputElement = document.getElementById('overlay')
    await loadModels()
    const startButton = document.getElementById("startButton")
    startButton.addEventListener("click", () => start(inputElement, outputElement))
    inputElement.addEventListener('play', () => setupFaceRecognition(inputElement, outputElement))
    window.addEventListener("orientationchange",(event) => setupCanvas(inputElement, outputElement))
}

document.addEventListener("DOMContentLoaded", main)